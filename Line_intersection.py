# Line intersection checker for WKT Linestring geometries
# Pure Python3, no dependencies
# See https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry


# Function to check if lines intersect
# Inputs:
#   - 2 line features in WKT format
# Returns:
#   - True/False depending on whether the lines intersect or not
def lines_intersect(wkt_a, wkt_b):
    # Parse WKT geometries to tuples:
    line_a = geometryparser(wkt_a)
    line_b = geometryparser(wkt_b)

    for i in range(len(line_a) - 1):        # Iterate over line segments (line a)
        segment_a = (line_a[i], line_a[i+1])
        for i in range(len(line_b) - 1):    # Check for intersections with line b segments
            segment_b = (line_b[i], line_b[i+1])
            if (get_intersection(segment_a[0], segment_a[1], segment_b[0], segment_b[1])):
                return True                 # Intersection was found
    return False                            # No intersections were found


# Parses WKT geometries to point tuples ((x,y), (x,y), (x,y), ...)
def geometryparser(wkt):
    ret = None
    if (wkt[:10].upper() == "LINESTRING"):  # Only linestrings allowed
        tmp_array = []
        ret = wkt[10:].strip("() ").replace("(", "").replace(")", "")
        for i in ret.split(","):
            tmp = i.strip().split(" ")
            tmp_array.append((float(tmp[0]), float(tmp[1])))
        ret = tuple(tmp_array)
    else:                                   # Other geometry types are not allowed, terminate
        print("Invalid geometry type. Exiting.")
        exit()
    return ret


# Get line definitions in the general ax+by=c form
# A "point" is a tuple with x & y coordinates: (x,y)
def get_line_abc(point_a, point_b):
    a = point_b[1] - point_a[1]
    b = point_a[0] - point_b[0]
    c = a * point_a[0] + b * point_a[1]
    return (a, b, c)


# Line segment intersection
# Inputs:
#   - Points defining line segments: (ax1,ay1), (ax2,ay2), (bx1,by1), (bx2,by2)
# Returns:
#   - True:     If intersection is found
#   - False:    No intersection is found (parallel lines or intersection outside of line segments)
def get_intersection(line_a_v1, line_a_v2, line_b_v1, line_b_v2):
    abc1 = get_line_abc(line_a_v1, line_a_v2)
    abc2 = get_line_abc(line_b_v1, line_b_v2)
    x = None
    y = None

    det = abc1[0] * abc2[1] - abc2[0] * abc1[1]

    if (det == 0):                          # Lines are parallel
        return False                        # No intersection
    else:                                   # Calculate intersection
        x = (abc2[1] * abc1[2] - abc1[1] * abc2[2]) / det
        y = (abc1[0] * abc2[2] - abc2[0] * abc1[2]) / det

    # Is intersection within or outside line segment?
    if (x >= min(line_a_v1[0], line_a_v2[0]) and x <= max(line_a_v1[0], line_a_v2[0])):
        if (x >= min(line_b_v1[0], line_b_v2[0]) and x <= max(line_b_v1[0], line_b_v2[0])):
            if (y >= min(line_a_v1[1], line_a_v2[1]) and y <= max(line_a_v1[1], line_a_v2[1])):
                if (y >= min(line_b_v1[1], line_b_v2[1]) and y <= max(line_b_v1[1], line_b_v2[1])):
                    return True             # Intersection was found
    return False                            # No intersection found


#
# # Test examples:
#

# No intersection:
#linea = "LineString (0.29144251277069905 0.77585276223923383, 0.29158136820331088 0.77545603243177141, 0.29128382084771415 0.77526758577322685, 0.29135324856402006 0.77502954788874945, 0.29166071416480333 0.77504938437912252, 0.29185907906853453 0.77459314510054089, 0.29137308505439313 0.77449396264867532, 0.29154169522256462 0.77408731459602642, 0.29201777099151943 0.77423608827382473, 0.2918789155589076 0.77379968548561617, 0.29243433728935486 0.77381952197598936, 0.29241450079898179 0.77335336445222114, 0.29297984077461559 0.77353189286557911, 0.29314845094278708 0.77296655288994531, 0.29331706111095857 0.77336328269740762, 0.29362452671174188 0.77264916904397551, 0.29377330038954025 0.77321450901960931, 0.29417003019700255 0.77230203046244594, 0.29424937615849506 0.77316491779367646, 0.29475520666300953 0.77216317502983411, 0.29477504315338265 0.77302606236106464, 0.29419978493256227 0.77358148409151195, 0.2953007101482702 0.77371042127893719, 0.29407084774513698 0.77397821389897425, 0.29509242699935251 0.77437494370643656, 0.29372370916360746 0.77452371738423498, 0.2947353701726364 0.77487085596576455, 0.29359477197618222 0.77515848507617469, 0.29448741404297246 0.77564447909031609, 0.29351542601468972 0.77576349803255473, 0.29401133827401765 0.77616022784001704, 0.29282114885163063 0.77620981906594988, 0.29330714286577203 0.77670573132527776, 0.29218638115969092 0.77663630360897185, 0.2917598966166689 0.77719172533941916, 0.29219629940487751 0.77615030959483056, 0.29060938017502819 0.77708262464236699, 0.29195826152040011 0.77583292574886065)"
#ineb = "LineString (0.29157144995812434 0.77583292574886065, 0.29171030539073611 0.775465950676958, 0.29141275803513939 0.7752279127924806, 0.29143259452551251 0.77512873034061502, 0.29181940608778828 0.77507913911468218, 0.29191858853965386 0.77446420791311565, 0.29153177697737809 0.77436502546125008, 0.291601204693684 0.77421625178345166, 0.2921665446693178 0.77431543423531723, 0.29201777099151943 0.77388894969229527, 0.29265253868345914 0.77387903144710868, 0.29247401027010111 0.77346246514927319, 0.29312861445241395 0.77361123882707161, 0.29353526250506284 0.77321450901960931, 0.29358485373099563 0.77295663464475872, 0.29376338214435371 0.77335336445222114, 0.29413035721625636 0.77254998659210983, 0.29419978493256227 0.77332360971666148, 0.29468577894670361 0.77252023185655017, 0.29467586070151702 0.77295663464475872, 0.29403117476439078 0.77363107531744468, 0.29476512490819606 0.77371042127893719, 0.29390223757696549 0.773938540918228, 0.29402125651920419 0.77410715108639949, 0.29479487964375573 0.77432535248050383, 0.29354518075024943 0.77446420791311565, 0.29417994844218914 0.77487085596576455, 0.29374354565398059 0.77499979315318979, 0.29319804216871986 0.77460306334572748, 0.29349558952431659 0.77535684997990584, 0.29423945791330847 0.77559488786438324, 0.29305918673610803 0.77570398856143541, 0.29296000428424246 0.77484110123020489, 0.29243433728935486 0.7749898749080032, 0.29269221166420539 0.77600153591703214, 0.29339640707245102 0.77585276223923383, 0.293733627408794 0.77606104538815146, 0.29259302921233982 0.77613047310445737, 0.29280131236125756 0.77650736642154661, 0.29255335623159356 0.77648752993117354, 0.29246409202491458 0.77609080012371112, 0.292364909573049 0.77607096363333805, 0.29239466430860866 0.77649744817636002, 0.29219629940487751 0.77650736642154661, 0.29227564536636996 0.77601145416221873, 0.2910755376987964 0.77673548606083742, 0.2921665446693178 0.77578333452292791, 0.29197809801077318 0.77560480610956983, 0.29033166930980453 0.77721156182979223)"

# Intersection:
linea = "LineString (0.29157144995812434 0.77583292574886065, 0.29171030539073611 0.775465950676958, 0.29141275803513939 0.7752279127924806, 0.29143259452551251 0.77512873034061502, 0.29181940608778828 0.77507913911468218, 0.29191858853965386 0.77446420791311565, 0.29153177697737809 0.77436502546125008, 0.291601204693684 0.77421625178345166, 0.2921665446693178 0.77431543423531723, 0.29201777099151943 0.77388894969229527, 0.29265253868345914 0.77387903144710868, 0.29247401027010111 0.77346246514927319, 0.29312861445241395 0.77361123882707161, 0.29353526250506284 0.77321450901960931, 0.29358485373099563 0.77295663464475872, 0.29376338214435371 0.77335336445222114, 0.29413035721625636 0.77254998659210983, 0.29419978493256227 0.77332360971666148, 0.29468577894670361 0.77252023185655017, 0.29467586070151702 0.77295663464475872, 0.29403117476439078 0.77363107531744468, 0.29476512490819606 0.77371042127893719, 0.29390223757696549 0.773938540918228, 0.29425760950231389 0.77398826257891884, 0.29479487964375573 0.77432535248050383, 0.29354518075024943 0.77446420791311565, 0.29417994844218914 0.77487085596576455, 0.29374354565398059 0.77499979315318979, 0.29319804216871986 0.77460306334572748, 0.29349558952431659 0.77535684997990584, 0.29423945791330847 0.77559488786438324, 0.29305918673610803 0.77570398856143541, 0.29296000428424246 0.77484110123020489, 0.29243433728935486 0.7749898749080032, 0.29269221166420539 0.77600153591703214, 0.29339640707245102 0.77585276223923383, 0.293733627408794 0.77606104538815146, 0.29259302921233982 0.77613047310445737, 0.29280131236125756 0.77650736642154661, 0.29255335623159356 0.77648752993117354, 0.29246409202491458 0.77609080012371112, 0.292364909573049 0.77607096363333805, 0.29239466430860866 0.77649744817636002, 0.29219629940487751 0.77650736642154661, 0.29227564536636996 0.77601145416221873, 0.2910755376987964 0.77673548606083742, 0.2921665446693178 0.77578333452292791, 0.29197809801077318 0.77560480610956983, 0.29033166930980453 0.77721156182979223)"
lineb = "LineString (0.29144251277069905 0.77585276223923383, 0.29158136820331088 0.77545603243177141, 0.29128382084771415 0.77526758577322685, 0.29135324856402006 0.77502954788874945, 0.29166071416480333 0.77504938437912252, 0.29185907906853453 0.77459314510054089, 0.29137308505439313 0.77449396264867532, 0.29154169522256462 0.77408731459602642, 0.29201777099151943 0.77423608827382473, 0.2918789155589076 0.77379968548561617, 0.29243433728935486 0.77381952197598936, 0.29241450079898179 0.77335336445222114, 0.29297984077461559 0.77353189286557911, 0.29314845094278708 0.77296655288994531, 0.29331706111095857 0.77336328269740762, 0.29362452671174188 0.77264916904397551, 0.29377330038954025 0.77321450901960931, 0.29417003019700255 0.77230203046244594, 0.29424937615849506 0.77316491779367646, 0.29475520666300953 0.77216317502983411, 0.29477504315338265 0.77302606236106464, 0.29419978493256227 0.77358148409151195, 0.2953007101482702 0.77371042127893719, 0.29407084774513698 0.77397821389897425, 0.29509242699935251 0.77437494370643656, 0.29372370916360746 0.77452371738423498, 0.2947353701726364 0.77487085596576455, 0.29359477197618222 0.77515848507617469, 0.29448741404297246 0.77564447909031609, 0.29351542601468972 0.77576349803255473, 0.29401133827401765 0.77616022784001704, 0.29282114885163063 0.77620981906594988, 0.29330714286577203 0.77670573132527776, 0.29218638115969092 0.77663630360897185, 0.2917598966166689 0.77719172533941916, 0.29219629940487751 0.77615030959483056, 0.29060938017502819 0.77708262464236699, 0.29195826152040011 0.77583292574886065)"

print(lines_intersect(linea, lineb))
